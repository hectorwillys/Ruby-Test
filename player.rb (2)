class Player
	@health
	@last_walk
	def play_turn(warrior)
		enemy_count = 0
		str_listen = warrior.listen.to_s[1..-2].split(', ')
		dir = [:right,:left,:forward,:backward]
		ene_dir = []
		dir.each {
			|d|
			if(warrior.feel d).enemy?
				ene_dir.push d
				enemy_count += 1
			end
		}
		if str_listen.include? 'Captive'
			nextdir = warrior.direction_of warrior.listen[str_listen.index 'Captive']
			if (warrior.feel nextdir).empty?
				warrior.walk! nextdir
				@last_walk = nextdir
			elsif (warrior.feel nextdir).captive?
				warrior.rescue! nextdir
			else 
				nextdir = alt_way(@last_walk, warrior,nextdir)
				warrior.walk! nextdir
				@last_walk = nextdir
			end
		elsif warrior.listen != []
			if (not ene_dir[0].nil?)
			puts enemy_count
				if enemy_count == 1
					warrior.attack! ene_dir.pop
				elsif enemy_count >1
					warrior.bind! ene_dir.pop
				end
			elsif warrior.health < 20
				warrior.rest!
			else
				warrior.walk! (warrior.direction_of warrior.listen[0])
				@last_walk = (warrior.direction_of warrior.listen[0])
			end			
		else 
			warrior.walk! warrior.direction_of_stairs
			@last_walk = warrior.direction_of_stairs
		end	
		@health = warrior.health
	end
	
	def alt_way(dir,warrior,nextdir)
		dirs = [:right,:left,:forward,:backward]
		dirs.delete(nextdir)
		if dir == :right
			dirs.delete(:left)
		elsif dir == :left
			dirs.delete(:right)
		elsif dir == :backward
			dirs.delete(:forward) 
		else
			dirs.delete(:backward)
		end
		dirs.each{
			|d|
			dirs.delete(d) unless (warrior.feel d).empty?
		}
		dirs[0]
	end
end

